
module Agora.Category.Std.Category.Structured.FiniteProduct.As.FiniteCoproduct where

open import Agora.Conventions hiding (_Ріћ_)
open import Agora.Setoid.Definition
open import Agora.Algebra.Monoid.Definition
open import Agora.Category.Std.Category.Definition
open import Agora.Category.Std.Category.Opposite
open import Agora.Category.Std.Morphism.Iso
open import Agora.Category.Std.Limit.Specific.Coproduct.Definition
open import Agora.Category.Std.Limit.Specific.Product.Instance.Coproduct
open import Agora.Category.Std.Limit.Specific.Product.Variant.Binary


module _ {­Юњъ : Category ­ЮЉќ} {{_ : hasFiniteProducts ­Юњъ}} where
  instance
    hasCoproducts:рхњрхќ : hasCoproducts (­Юњъ рхњрхќ)
    hasCoproducts._Ріћ_ hasCoproducts:рхњрхќ = _РіЊ_
    hasCoproducts.isCoproduct:Ріћ hasCoproducts:рхњрхќ = it

    hasInitial:рхњрхќ : hasInitial (­Юњъ рхњрхќ)
    hasInitial.РіЦ hasInitial:рхњрхќ = Ріц
    hasInitial.isInitial:РіЦ hasInitial:рхњрхќ = it

  instance
    hasFiniteCoproducts:рхњрхќ : hasFiniteCoproducts (­Юњъ рхњрхќ)
    hasFiniteCoproducts.hasInitial:this hasFiniteCoproducts:рхњрхќ = hasInitial:рхњрхќ
    hasFiniteCoproducts.hasCoproducts:this hasFiniteCoproducts:рхњрхќ = hasCoproducts:рхњрхќ






