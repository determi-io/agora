
module Agora.Category.Std.Category.Structured.FiniteProduct.Definition where

open import Agora.Conventions
open import Agora.Setoid.Definition
-- open import Agora.Data.Fin.Definition
open import Agora.Category.Std.Category.Definition
open import Agora.Category.Std.Limit.Specific.Product

open import Data.Fin using (Fin ; suc ; zero)

FiniteProductCategory : тИА ЁЭСЦ -> ЁЭТ░ _
FiniteProductCategory ЁЭСЦ = Category ЁЭСЦ :& hasFiniteProducts


module _ {ЁЭТЮ : ЁЭТ░ _} {{_ : FiniteProductCategory ЁЭСЦ on ЁЭТЮ}} where
  тиЕс╢атБ▒тБ┐ : тИА{n} -> (F : Fin n -> ЁЭТЮ) -> ЁЭТЮ
  тиЕс╢атБ▒тБ┐ {zero} F = тКд
  тиЕс╢атБ▒тБ┐ {suc n} F = F zero тКУ (тиЕс╢атБ▒тБ┐ (╬╗ i -> F (suc i)))

  syntax тиЕс╢атБ▒тБ┐ {n = n} (╬╗ x -> F) = тиЕс╢атБ▒тБ┐ x тИИ n , F








