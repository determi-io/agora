-- SPDX-FileCopyrightText: 2024 Maxim Urschumzew <mxmurw@determi.io>
--
-- SPDX-License-Identifier: MIT

module Agora.Category.Std.Category.Structured.FiniteCoproduct.As.Monoid where

open import Agora.Conventions hiding (_Ріћ_)
open import Agora.Setoid
open import Agora.Algebra.Monoid.Definition
open import Agora.Category.Std.Category.Definition
open import Agora.Category.Std.Category.Opposite
open import Agora.Category.Std.Morphism.Iso
open import Agora.Category.Std.Limit.Specific.Coproduct.Definition
open import Agora.Category.Std.Limit.Specific.Product
open import Agora.Category.Std.Category.Structured.FiniteCoproduct.Definition
open import Agora.Category.Std.Category.Structured.FiniteProduct.Definition
open import Agora.Category.Std.Category.Structured.FiniteProduct.As.Monoid
open import Agora.Category.Std.Category.Structured.FiniteCoproduct.As.FiniteProduct



module _ {­Юњъ : ­Юњ░ _} {{_ : ­Юњъ is FiniteCoproductCategory ­ЮЉќ}} where

  private instance
    _ : isSetoid ­Юњъ
    _ = isSetoid:byCategory


  private
    ­Юњърхњрхќ : Category _
    ­Юњърхњрхќ = Рђ▓ ­Юњъ Рђ▓ рхњрхќ
    instance
      _ : isMonoid (­Юњъ since isSetoid:byCategory {{of ­Юњърхњрхќ}})
      _ = isMonoid:byHasFiniteProducts

  isMonoid:byHasFiniteCoproducts : isMonoid Рђ▓ ­Юњъ Рђ▓
  isMonoid:byHasFiniteCoproducts = isMonoid:byрхњрхќ


module _ {­Юњъ : ­Юњ░ _} {{P : ­Юњъ is FiniteCoproductCategory ­ЮЉќ}} where
  private instance
    _ : isSetoid ­Юњъ
    _ = isSetoid:byCategory

    _ : isMonoid Рђ▓ ­Юњъ Рђ▓
    _ = isMonoid:byHasFiniteCoproducts {{P}}

  unit-l-Ріћ : Рѕђ{a : ­Юњъ} -> РіЦ Ріћ a Рѕ╝ a
  unit-l-Ріћ = unit-l-РІє

  unit-r-Ріћ : Рѕђ{a : ­Юњъ} -> a Ріћ РіЦ Рѕ╝ a
  unit-r-Ріћ = unit-r-РІє

  assoc-l-Ріћ : Рѕђ{a b c : ­Юњъ} -> (a Ріћ b) Ріћ c Рѕ╝ a Ріћ (b Ріћ c)
  assoc-l-Ріћ = assoc-l-РІє





