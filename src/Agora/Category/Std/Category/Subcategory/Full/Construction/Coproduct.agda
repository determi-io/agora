
module Agora.Category.Std.Category.Subcategory.Full.Construction.Coproduct where

open import Agora.Conventions

open import Agora.Setoid
open import Agora.Set.Discrete
open import Agora.Category.Std.Category.Definition
open import Agora.Category.Std.Functor.Definition

open import Agora.Category.Std.Category.Subcategory.Full
open import Agora.Category.Std.Limit.Specific.Coproduct.Definition


module _ {ùíû : Category ùëñ} {A : ùí∞ ùëó} {f : A -> ‚ü® ùíû ‚ü©} where

  module _ {a b x : ùêÖùêÆùê•ùê• ùíû f} where

    isCoproduct:byFullSubcategory : {{_ : isCoproduct (f ‚ü® a ‚ü©) (f ‚ü® b ‚ü©) (f ‚ü® x ‚ü©)}} -> isCoproduct a b x
    isCoproduct.Œπ‚ÇÄ isCoproduct:byFullSubcategory = incl Œπ‚ÇÄ
    isCoproduct.Œπ‚ÇÅ isCoproduct:byFullSubcategory = incl Œπ‚ÇÅ
    isCoproduct.‚¶ó isCoproduct:byFullSubcategory ‚¶ò = Œª (f , g) -> incl ‚¶ó ‚ü® f ‚ü© , ‚ü® g ‚ü© ‚¶ò
    isCoproduct.isSetoidHom:‚¶ó‚¶ò isCoproduct:byFullSubcategory = {!!}
    isCoproduct.reduce-Œπ‚ÇÄ isCoproduct:byFullSubcategory = incl reduce-Œπ‚ÇÄ
    isCoproduct.reduce-Œπ‚ÇÅ isCoproduct:byFullSubcategory = incl reduce-Œπ‚ÇÅ
    isCoproduct.expand-Œπ‚ÇÄ,Œπ‚ÇÅ isCoproduct:byFullSubcategory = incl expand-Œπ‚ÇÄ,Œπ‚ÇÅ






