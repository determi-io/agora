-- SPDX-FileCopyrightText: 2024 Maxim Urschumzew <mxmurw@determi.io>
--
-- SPDX-License-Identifier: MIT

module Agora.Category.Std.Natural.Definition where

open import Agora.Conventions
open import Agora.Conventions.Prelude.Classes.Structure

open import Agora.Setoid.Definition
open import Agora.Category.Std.Category.Definition
open import Agora.Category.Std.Functor.Definition

--------------------------------------------------------------------------------
-- Natural Transformations



-- [Definition]
-- | Let [..], [..] be again two categories,
module _ {ùíû : Category ùëñ} {ùíü : Category ùëó} where
-- |> and [..] two parallel functors between them.
  module _ (F G : Functor ùíû ùíü) where

-- |> A family of morphisms |Œ±|, where for every |x : ùíû|, |Œ± ‚åÑ x : F x ‚ü∂ G x| is an arrow in |ùíü|,
--   is called a *natural transformation* from |F| to |G|,
    record isNatural (Œ± : ‚àÄ(x : ‚ü® ùíû ‚ü©) -> Hom (‚ü® F ‚ü© x) (‚ü® G ‚ü© x)) : ùí∞ (ùëñ ÔΩ§ ùëó) where
      constructor natural

-- |> if it is natural, i.e., the following equation holds:
      field naturality : ‚àÄ{x y : ‚ü® ùíû ‚ü©} -> ‚àÄ(f : x ‚ü∂ y) -> Œ± x ‚óÜ mapOf G f ‚àº mapOf F f ‚óÜ Œ± y

    open isNatural {{...}} public
--  //

  -- module _ {F G : ‚ü® ùíû ‚ü© -> ‚ü® ùíü ‚ü©} where
  --   instance
  --     hasU:Natural : (‚àÄ(x : ‚ü® ùíû ‚ü©) ->  F x ‚ü∂ G x) isUniverseOf[ _ ] (‚àÄ(x : ‚ü® ùíû ‚ü©) -> F x ‚ü∂ G x)
  --     hasU:Natural = _isUniverseOf[_]_:byBase

    -- instance
    --   hasU:Natural' : hasU (‚àÄ{x : ‚ü® ùíû ‚ü©} -> ‚ü® F ‚ü© x ‚ü∂ ‚ü® G ‚ü© x) _ _
    --   hasU:Natural' = hasU:Base (‚àÄ{x : ‚ü® ùíû ‚ü©} -> ‚ü® F ‚ü© x ‚ü∂ ‚ü® G ‚ü© x)

  module _ (F G : Functor ùíû ùíü) where
    Natural : ùí∞ _
    Natural = (‚àÄ x -> ‚ü® F ‚ü© x ‚ü∂ ‚ü® G ‚ü© x) :& isNatural F G

-- unquoteDecl Natural natural = #struct "Nat" (quote isNatural) "Œ±" Natural natural


