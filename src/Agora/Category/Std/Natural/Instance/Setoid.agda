-- SPDX-FileCopyrightText: 2024 Maxim Urschumzew <mxmurw@determi.io>
--
-- SPDX-License-Identifier: MIT

module Agora.Category.Std.Natural.Instance.Setoid where

open import Agora.Conventions

open import Agora.Setoid.Definition
open import Agora.Category.Std.Category.Definition
open import Agora.Category.Std.Functor.Definition
open import Agora.Category.Std.Natural.Definition


module _ {ùíû : Category ùëñ} {ùíü : Category ùëó} {F G : Functor ùíû ùíü} where

  record _‚àº-Natural_ (Œ± Œ≤ : Natural F G) : ùí∞ (ùëñ ÔΩ§ ùëó) where
    constructor componentwise
    field ‚ü®_‚ü© : ‚àÄ(x : ‚ü® ùíû ‚ü©) -> ‚ü® Œ± ‚ü© x ‚àº ‚ü® Œ≤ ‚ü© x

  open _‚àº-Natural_ public


  -- _‚àº-Natural_ : (Œ± Œ≤ : Natural F G) -> ùí∞ _
  -- Œ± ‚àº-Natural Œ≤ = ‚àÄ(x : ‚ü® ùíû ‚ü©) -> ‚ü® Œ± ‚ü© x ‚àº ‚ü® Œ≤ ‚ü© x

  -- instance
  --   isEquivRel:‚àº-Natural : isEquivRel (‚àº-Base (Œª (a b : Hom-Base Natural F G) -> ‚ü® a ‚ü© ‚àº-Natural ‚ü® b ‚ü©))
    -- isEquivRel.refl isEquivRel:‚àº-Natural = incl refl
    -- isEquivRel.sym isEquivRel:‚àº-Natural (incl p) = incl (sym p)
    -- isEquivRel._‚àô_ isEquivRel:‚àº-Natural (incl p) (incl q) = incl (p ‚àô q)

  instance
    isEquivRel:‚àº-Natural : isEquivRel _‚àº-Natural_
    isEquivRel:‚àº-Natural = record
      { refl-‚àº = (componentwise (Œª _ -> refl-‚àº))
      ; sym = Œª p -> componentwise Œª x -> sym (‚ü® p ‚ü© x)
      ; _‚àô_ = Œª p q -> componentwise Œª x -> ‚ü® p ‚ü© x ‚àô ‚ü® q ‚ü© x
      }

    isSetoid:Natural : isSetoid (Natural F G)
    isSetoid:Natural = record { _‚àº_ = _‚àº-Natural_ } 
    -- isSetoid:byDef _‚àº-Natural_ (componentwise (Œª _ -> refl)) {!!} {!!}
    -- isSetoid._‚àº'_ isSetoid:Natural a b = ‚ü® a ‚ü© ‚àº-Natural ‚ü® b ‚ü©
    -- isSetoid.isEquivRel:‚àº isSetoid:Natural = isEquivRel:‚àº-Natural


