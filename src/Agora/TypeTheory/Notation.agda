
module Agora.TypeTheory.Notation where

open import Agora.Conventions hiding (m ; n ; _‚àô_ ; _‚à£_)


record isTypeTheory {ùëò} (A : ùí∞ ùëñ) : ùí∞ (ùëñ ÔΩ§ ùëò ‚Å∫) where
  field {CtxType} : A -> ùí∞ ùëò
  field Ctx : {{a : A}} -> CtxType a
  [_]-Ctx : (a : A) -> CtxType a
  [_]-Ctx a = Ctx {{a}}
  field {TypeType} : A -> ùí∞ ùëò
  field ‚ä¢Type : {{a : A}} -> TypeType a
  field {TurnstyleType} : A -> ùí∞ ùëò
  field _‚ä¢_ : {{a : A}} -> TurnstyleType a
  _‚ñª_‚ä¢_ : (a : A) -> TurnstyleType a
  _‚ñª_‚ä¢_ a = _‚ä¢_ {{a}}

open isTypeTheory {{...}} public

