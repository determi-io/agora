
module Agora.Order.WellFounded.Construction.Product where

open import Agora.Conventions
open import Agora.Set.Induction.WellFounded
open import Agora.Data.Product.Definition
open import Agora.Order.WellFounded.Definition

module _ {A : ùí∞ ùëñ} {B : ùí∞ ùëó} (R : A -> A -> ùí∞ ùëò) (S : B -> B -> ùí∞ ùëô) where
  √ó-‚â™ : (A √ó B) -> (A √ó B) -> ùí∞ (ùëò ÔΩ§ ùëô)
  √ó-‚â™ (a , b) (a2 , b2) = R a a2 √ó S b b2

  private T = √ó-‚â™

  module _ (p : WellFounded R) (q : WellFounded S) where
    private
      lem-3 : ‚àÄ a b -> Acc R a -> Acc S b -> Acc T (a , b)
      lem-3 a b (acc racc) (acc sacc) = acc Œª (a1 , b1) (r1 , s1) ‚Üí lem-3 a1 b1 (racc a1 r1) (sacc b1 s1)

      lem-1 : ‚àÄ x -> Acc T x
      lem-1 (a0 , b0) = lem-3 a0 b0 (p a0) (q b0)

    WellFounded:√ó : WellFounded T
    WellFounded:√ó = lem-1

module _ {A : ùí∞ ùëñ} {{_ : isWF ùëó A}}
         {B : ùí∞ ùëò} {{_ : isWF ùëô B}} where
  instance
    isWF:√ó : isWF _ (A √ó B)
    isWF:√ó = record { _‚â™_ = √ó-‚â™ _‚â™_ _‚â™_ ; wellFounded = WellFounded:√ó _‚â™_ _‚â™_ wellFounded wellFounded }

  module _ {{_ : isWFT ‚Ä≤ A ‚Ä≤}} {{_ : isWFT ‚Ä≤ B ‚Ä≤}} where
    instance
      isWFT:√ó : isWFT (A √ó B)
      isWFT:√ó = record { _‚ü°-‚â™_ = Œª (p0 , p1) (q0 , q1) ‚Üí (p0 ‚ü°-‚â™ q0) , (p1 ‚ü°-‚â™ q1) }

instance
  isWF:ùüô : isWF _ (ùüô-ùí∞)
  isWF:ùüô = record { _‚â™_ = (Œª a b -> ‚ä•-ùí∞ {‚Ñì‚ÇÄ}) ; wellFounded = Œª x ‚Üí acc Œª _ () }

  isWFT:ùüô : isWFT ‚Ä≤ ùüô-ùí∞ ‚Ä≤
  isWFT:ùüô = record { _‚ü°-‚â™_ = Œª () }

  isWFT0:ùüô : isWFT0 ‚Ä≤ ùüô-ùí∞ ‚Ä≤
  isWFT0:ùüô = record { ‚ä•-WFT = tt ; initial-‚ä•-WFT = left refl-‚â£ }


instance
  isWF:‚ä§ : isWF _ (‚ä§-ùí∞ {ùëñ})
  isWF:‚ä§ = record { _‚â™_ = (Œª a b -> ‚ä•-ùí∞ {‚Ñì‚ÇÄ}) ; wellFounded = Œª x ‚Üí acc Œª _ () }

  isWFT:‚ä§ : isWFT ‚Ä≤ ‚ä§-ùí∞ {ùëñ} ‚Ä≤
  isWFT:‚ä§ = record { _‚ü°-‚â™_ = Œª () }

  isWFT0:‚ä§ : isWFT0 ‚Ä≤ ‚ä§-ùí∞ {ùëñ} ‚Ä≤
  isWFT0:‚ä§ = record { ‚ä•-WFT = tt ; initial-‚ä•-WFT = left (Pa _) }
    where
      Pa : ‚àÄ(a : ‚ä§-ùí∞ {ùëñ}) -> tt ‚â£ a
      Pa tt = refl-‚â£


    -- module _ {{_ : isWFT0 ‚Ä≤ A ‚Ä≤}} {{_ : isWFT0 ‚Ä≤ B ‚Ä≤}} where
    --   private
    --     ‚ä•' : A √ó B
    --     ‚ä•' = ‚ä•-WFT , ‚ä•-WFT

    --     lem-1 : ‚àÄ{a : A} {b : B} -> ‚ä•' ‚™£ (a , b)
    --     lem-1 {a} {b} with initial-‚ä•-WFT {a = a} | initial-‚ä•-WFT {a = b}
    --     ... | left refl-‚â£ | left refl-‚â£ = left refl-‚â£
    --     ... | left x | just x‚ÇÅ = {!!}
    --     ... | just x | Y = {!!}

    --   instance
    --     isWFT0:Lexi : isWFT0 (A √ó B)
    --     isWFT0:Lexi = record { ‚ä•-WFT = ‚ä•' ; initial-‚ä•-WFT = lem-1 }



