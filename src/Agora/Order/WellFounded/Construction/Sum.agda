
module Agora.Order.WellFounded.Construction.Sum where

{-

open import Agora.Conventions
open import Agora.Set.Induction.WellFounded
open import Agora.Data.Sum.Definition
open import Agora.Order.WellFounded.Definition


module _ {A : ùí∞ ùëñ} {B : ùí∞ ùëó} {{_ : isWF ùëò A}} {{_ : isWF ùëô B}} where
  data +-‚â™ : (A + B) -> (A + B) -> ùí∞ (ùëñ ÔΩ§ ùëó ÔΩ§ ùëò ÔΩ§ ùëô) where
    left : ‚àÄ{a0 a1 : A} -> a0 ‚â™ a1 -> +-‚â™ (left a0) (left a1)
    right : ‚àÄ{b0 b1 : B} -> b0 ‚â™ b1 -> +-‚â™ (right b0) (right b1)
    left-right : ‚àÄ{a : A} {b : B} -> +-‚â™ (left a) (right b)

  private
    lem-1 : ‚àÄ{a : A} -> Acc _‚â™_ a -> Acc +-‚â™ (left a)
    lem-1 {a} (acc p) = acc (Œª {y (left x) ‚Üí lem-1 (p _ x)})

    lem-1b : ‚àÄ{b : B} -> Acc _‚â™_ b -> Acc +-‚â™ (right b)
    lem-1b {b} (acc p) = acc (Œª { y (right x) ‚Üí lem-1b (p _ x)
                                ; y (left-right) -> lem-1 (wellFounded _)})


    lem-2 : WellFounded +-‚â™
    lem-2 (left x) = lem-1 (wellFounded _)
    lem-2 (just x) = lem-1b (wellFounded _)

  instance
    isWF:+ : isWF _ (A + B)
    isWF:+ = record { _‚â™_ = +-‚â™ ; wellFounded = lem-2 }


  module _ {{_ : isWFT ‚Ä≤ A ‚Ä≤}} {{_ : isWFT ‚Ä≤ B ‚Ä≤}} where
    lem-3 : {a b c : A +-ùí∞ B} ‚Üí +-‚â™ a b ‚Üí +-‚â™ b c ‚Üí +-‚â™ a c
    lem-3 (left x) (left y) = left (x ‚ü°-‚â™ y)
    lem-3 (left x) left-right = left-right
    lem-3 (right x) (right y) = right (x ‚ü°-‚â™ y)
    lem-3 left-right (right x) = left-right

    instance
      isWFT:+ : isWFT (A + B)
      isWFT:+ = record { _‚ü°-‚â™_ = lem-3 }


    module _ {{_ : isWFT0 ‚Ä≤ A ‚Ä≤}} where
      private
        ‚ä•' : A + B
        ‚ä•' = left ‚ä•-WFT
        lem-4 : ‚àÄ{a : A + B} -> ‚ä•' ‚™£ a
        lem-4 {left x} with initial-‚ä•-WFT {a = x}
        ... | left refl-‚â£ = left refl-‚â£
        ... | just p = right (left p)
        lem-4 {just x} = right left-right

      instance
        isWFT0:+ : isWFT0 (A + B)
        isWFT0:+ = record
          { ‚ä•-WFT = ‚ä•'
          ; initial-‚ä•-WFT = lem-4
          }

-}
