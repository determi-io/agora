
module Agora.Order.DedekindCompletion.Instance.Linearorder where

{-

open import Agora.Conventions
open import Agora.Data.Int.Definition
open import Agora.Data.Rational.Definition

open import Agora.Algebra.Setoid
open import Agora.Order.DedekindCompletion.Definition
open import Agora.Order.Linearorder

-- mostly from https://ncatlab.org/nlab/show/real+number
-- and https://ncatlab.org/nlab/show/Dedekind+cut


module _ {ùëñ : ùîè ^ 3} {X : Linearorder ùëñ} where
  instance
    isLinearorder:Cut : isLinearorder _ ‚Ä≤ Cut X ‚Ä≤
    isLinearorder.my< isLinearorder:Cut = _<-Cut_
    isLinearorder.irrefl-< isLinearorder:Cut {‚©ò , ‚©ó} (incl (x , ‚©óx , ‚©òx)) = disjoint-‚©ò‚©ó ‚©òx ‚©óx
      -- let X = by-‚©ò‚©ó-< ‚©òx ‚©óx
      -- in irrefl-< X
    isLinearorder.asym-< isLinearorder:Cut {a‚©ò , a‚©ó} {b‚©ò , b‚©ó}  (incl (x , x-a‚©ó , x-b‚©ò)) (incl (y , y-b‚©ó , y-a‚©ò)) =
      let P‚ÇÄ : x < y
          P‚ÇÄ = by-‚©ò‚©ó-< x-b‚©ò y-b‚©ó

          P‚ÇÅ : y < x
          P‚ÇÅ = by-‚©ò‚©ó-< y-a‚©ò x-a‚©ó

      in asym-< P‚ÇÄ P‚ÇÅ
    isLinearorder.compare-< isLinearorder:Cut {a‚©ò , a‚©ó} {c‚©ò , c‚©ó} (incl (x , x-a‚©ó , x-c‚©ò)) (b‚©ò , b‚©ó) =
      let yp : ‚àë Œª (y : ‚¶ã ‚ü® a‚©ó ‚ü© ‚¶å) -> ‚ü® y ‚ü© < x
          yp = open-‚©ó x-a‚©ó

          y , P‚ÇÄ = yp

          P‚ÇÅ : ‚ü® b‚©ò ‚ü© ‚ü® y ‚ü© +-ùí∞ ‚ü® b‚©ó ‚ü© x
          P‚ÇÅ = compare-Cut P‚ÇÄ

      in case P‚ÇÅ of
           (Œª p -> left (incl (‚ü® y ‚ü© , Proof y , p)))
           (Œª p -> right (incl (x , p , x-c‚©ò)))

    isLinearorder.connected-< isLinearorder:Cut {a‚©ò , a‚©ó} {b‚©ò , b‚©ó} a‚âÆb b‚âÆa =
      let P‚ÇÄ : ‚ü® a‚©ò ‚ü© ‚´ó ‚ü® b‚©ò ‚ü©
          P‚ÇÄ = let f : ‚àÄ{r} -> ‚ü® a‚©ò ‚ü© r -> ‚ü® b‚©ò ‚ü© r
                   f {r} r-a‚©ò =
                     let r‚ÇÇ , r<r‚ÇÇ = open-‚©ò r-a‚©ò
                     in case compare-Cut r<r‚ÇÇ of
                          (Œª (q : ‚ü® b‚©ò ‚ü© r)      -> q)
                          (Œª (q : ‚ü® b‚©ó ‚ü© ‚ü® r‚ÇÇ ‚ü©)  -> ùüò-rec (b‚âÆa (incl (‚ü® r‚ÇÇ ‚ü© , q , Proof r‚ÇÇ))))
                   g : ‚àÄ{r} -> ‚ü® b‚©ò ‚ü© r -> ‚ü® a‚©ò ‚ü© r
                   g {r} r-b‚©ò =
                     let r‚ÇÇ , r<r‚ÇÇ = open-‚©ò r-b‚©ò
                     in case compare-Cut r<r‚ÇÇ of
                          (Œª (q : ‚ü® a‚©ò ‚ü© r)      -> q)
                          (Œª (q : ‚ü® a‚©ó ‚ü© ‚ü® r‚ÇÇ ‚ü©)  -> ùüò-rec (a‚âÆb (incl (‚ü® r‚ÇÇ ‚ü© , q , Proof r‚ÇÇ))))
               in f , g

          P‚ÇÅ : ‚ü® a‚©ó ‚ü© ‚´ó ‚ü® b‚©ó ‚ü©
          P‚ÇÅ = let f : ‚àÄ{r} -> ‚ü® a‚©ó ‚ü© r -> ‚ü® b‚©ó ‚ü© r
                   f {r} r-a‚©ó =
                     let r‚ÇÇ , r<r‚ÇÇ = open-‚©ó r-a‚©ó
                     in case compare-Cut r<r‚ÇÇ of
                          (Œª (q : ‚ü® b‚©ò ‚ü© ‚ü® r‚ÇÇ ‚ü©)  -> ùüò-rec (a‚âÆb (incl (‚ü® r‚ÇÇ ‚ü© , Proof r‚ÇÇ , q))))
                          (Œª (q : ‚ü® b‚©ó ‚ü© r)      -> q)
                   g : ‚àÄ{r} -> ‚ü® b‚©ó ‚ü© r -> ‚ü® a‚©ó ‚ü© r
                   g {r} r-b‚©ó =
                     let r‚ÇÇ , r<r‚ÇÇ = open-‚©ó r-b‚©ó
                     in case compare-Cut r<r‚ÇÇ of
                          (Œª (q : ‚ü® a‚©ò ‚ü© ‚ü® r‚ÇÇ ‚ü©)  -> ùüò-rec (b‚âÆa (incl (‚ü® r‚ÇÇ ‚ü© , Proof r‚ÇÇ , q))))
                          (Œª (q : ‚ü® a‚©ó ‚ü© r)      -> q)
               in f , g

          P‚ÇÑ : (a‚©ò ‚àº b‚©ò) √ó-ùí∞ (a‚©ó ‚àº b‚©ó)
          P‚ÇÑ = incl P‚ÇÄ , incl P‚ÇÅ
      in incl P‚ÇÑ

    isLinearorder.transp-< isLinearorder:Cut {‚©òa‚ÇÄ , ‚©óa‚ÇÄ} {‚©òa‚ÇÅ , ‚©óa‚ÇÅ} {‚©òb‚ÇÄ , ‚©ób‚ÇÄ} {‚©òb‚ÇÅ , ‚©ób‚ÇÅ} p q (incl (x , x-‚©óa‚ÇÄ , x-‚©òb‚ÇÄ)) =
      let P‚ÇÄ = ‚ü® ‚ü® p ‚ü© .snd ‚ü© .fst
          P‚ÇÅ = ‚ü® ‚ü® q ‚ü© .fst ‚ü© .fst
      in incl (x , P‚ÇÄ x-‚©óa‚ÇÄ , P‚ÇÅ x-‚©òb‚ÇÄ)

-}


