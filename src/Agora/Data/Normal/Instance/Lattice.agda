
module Agora.Data.Normal.Instance.Lattice where

open import Agora.Conventions
open import Agora.Setoid.Definition
open import Agora.Order.Preorder
open import Agora.Order.Lattice

open import Agora.Data.Normal.Definition
open import Agora.Data.Normal.Instance.Setoid
open import Agora.Data.Normal.Instance.Preorder


module _ { X : Normalizable ๐} {{_ : isPreorder ๐ โฒ โจ X โฉ โฒ}} {{_ : hasFiniteMeets โฒ โจ X โฉ โฒ}} where

  _โง-๐ฉ_ : (a b : ๐ฉ X) -> ๐ฉ X
  _โง-๐ฉ_ a b = normalize (โจ a โฉ โง โจ b โฉ) since incl normal

  instance
    hasFiniteMeets:๐ฉ : hasFiniteMeets (๐ฉ X)
    hasFiniteMeets:๐ฉ = record
      { โค = normalize โค since incl normal
      ; terminal-โค = incl (transp-terminal-โค preserves-โผ:normalize)
      ; _โง_ = _โง-๐ฉ_
      ; ฯโ-โง = incl (transp-ฯโ-โง preserves-โผ:normalize)
      ; ฯโ-โง = incl (transp-ฯโ-โง preserves-โผ:normalize)
      ; โจ_,_โฉ-โง = ฮป ฯ ฯ -> incl (transp-โจโฉ-โง preserves-โผ:normalize โจ ฯ โฉ โจ ฯ โฉ)
      }


module _ { X : Normalizable ๐} {{_ : isPreorder ๐ โฒ โจ X โฉ โฒ}} {{_ : hasFiniteJoins โฒ โจ X โฉ โฒ}} where

  _โจ-๐ฉ_ : (a b : ๐ฉ X) -> ๐ฉ X
  _โจ-๐ฉ_ a b = normalize (โจ a โฉ โจ โจ b โฉ) since incl normal

  instance
    hasFiniteJoins:๐ฉ : hasFiniteJoins (๐ฉ X)
    hasFiniteJoins:๐ฉ = record
      { โฅ = normalize โฅ since incl normal
      ; initial-โฅ = incl (transp-initial-โฅ preserves-โผ:normalize)
      ; _โจ_ = _โจ-๐ฉ_
      ; ฮนโ-โจ = incl (transp-ฮนโ-โจ preserves-โผ:normalize)
      ; ฮนโ-โจ = incl (transp-ฮนโ-โจ preserves-โผ:normalize)
      ; [_,_]-โจ = ฮป ฯ ฯ -> incl (transp-[]-โจ preserves-โผ:normalize โจ ฯ โฉ โจ ฯ โฉ)
      }

