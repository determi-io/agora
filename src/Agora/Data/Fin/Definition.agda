-- SPDX-FileCopyrightText: 2024 Maxim Urschumzew <mxmurw@determi.io>
--
-- SPDX-License-Identifier: MIT

module Agora.Data.Fin.Definition where

open import Agora.Conventions
open import Agora.Data.Product.Definition
open import Agora.Data.Sum.Definition
open import Data.Nat renaming (_+_ to _+-‚Ñï_ ; _*_ to _*-‚Ñï_)
open import Data.Fin hiding (_+_ ; splitAt ; quotRem ; remQuot)
open import Data.Fin using (Fin ; suc ; zero) public


module _ {A : ùí∞ ùëñ} where

  private
    ---------------------------------------
    -- from the std lib:
    --
    -- splitAt m "i" = inj‚ÇÅ "i"      if i < m
    --                 inj‚ÇÇ "i - m"  if i ‚â• m
    -- This is dual to splitAt from Data.Vec.

    splitAt : ‚àÄ m {n} ‚Üí Fin (m +-‚Ñï n) ‚Üí Fin m +-ùí∞ Fin n
    splitAt zero    i       = right i
    splitAt (suc m) zero    = left zero
    splitAt (suc m) (suc i) = map-+-ùí∞ suc (Œª x -> x) (splitAt m i)

    -- quotRem k "i" = "i % k" , "i / k"
    -- This is dual to group from Data.Vec.

    quotRem : ‚àÄ n ‚Üí Fin (m *-‚Ñï n) ‚Üí Fin n √ó Fin m
    quotRem {suc m} n i with splitAt n i
    ... | left j = j , zero
    ... | right j = map-√ó-ùí∞ ((Œª x -> x) , suc) (quotRem {m} n j)

    -- a variant of quotRem the type of whose result matches the order of multiplication
  remQuot : ‚àÄ n ‚Üí Fin (m *-‚Ñï n) ‚Üí Fin m √ó Fin n
  remQuot i x = let a , b = (quotRem i x)
                in b , a

  case·∂†‚Å±‚Åø_of : Fin (m +-‚Ñï n) -> (Fin m -> A) -> (Fin n -> A) -> A
  case·∂†‚Å±‚Åø_of x f g = case splitAt _ x of f g

  ‚¶ó_‚¶ò·∂†‚Å±‚Åø : (Fin m -> A) √ó (Fin n -> A) -> Fin (m +-‚Ñï n) -> A
  ‚¶ó_‚¶ò·∂†‚Å±‚Åø (f , g) x = case·∂†‚Å±‚Åø x of f g

  tuple·∂†‚Å±‚Åø_of : Fin (m *-‚Ñï n) -> (Fin m -> Fin n -> A) -> A
  tuple·∂†‚Å±‚Åø_of x f = let (a , b) = (remQuot _ x) in f a b




